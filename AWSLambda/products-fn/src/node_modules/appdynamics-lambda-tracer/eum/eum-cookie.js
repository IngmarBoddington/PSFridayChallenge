/*
Copyright (c) AppDynamics, Inc., and its affiliates
2019
All Rights Reserved
 */
'use strict';
var Logger = require('../helpers/logger').Logger;
var constants = require('../constants');
var url = require('url');

function EumCookie(eum, transaction, reqHeaders, lambdaResponse) {
  this.logger = Logger.getInstance();
  this.eum = eum;

  this.transaction = transaction;
  this.reqHeaders = reqHeaders;
  this.lambdaResponse = lambdaResponse;
  this.isHttps = (reqHeaders && reqHeaders['X-Forwarded-Proto'] && reqHeaders['X-Forwarded-Proto'] === 'https') ? true : false;

  this.isAjax = undefined;
  this.isMobile = undefined;
  this.ajaxHeaderCounter = 0;

  this.cookieValue = undefined;
  this.keyForm = 'short';
  this.guid = undefined;
  this.headers = {};
}
exports.EumCookie = EumCookie;

EumCookie.prototype.addSubCookie = function (name, value) {
  var self = this;

  self.logger.debug("[Eum-cookie] addSubCookie: Name]", name, ": Value", value);

  var headerName;
  if (self.isAjax) {
    headerName = constants.ADRUM_PREFIX + (self.ajaxHeaderCounter++);
    if (!self.lambdaResponse['headers'])
      self.lambdaResponse['headers'] = {};

    self.lambdaResponse['headers'][headerName] = name + ':' + encodeURIComponent(value);
  }
  else {
    if (!self.cookieValue && self.reqHeaders) {
      var referer = self.reqHeaders.referer || self.reqHeaders['Referer'];
      self.cookieValue = 'R:' + (referer ? referer.length : '0');
    }

    self.cookieValue += '|' + name + ':' + encodeURIComponent(value);
  }
};

EumCookie.prototype.setCookie = function () {
  var self = this;

  // headers already set
  if (self.isAjax) {
    return;
  }

  self.setCookieHeader(constants.ADRUM_MASTER_COOKIE_NAME, self.cookieValue);
};

EumCookie.prototype.setCookieHeader = function (name, val) {
  var self = this;

  var pairs = [name + '=' + val];

  pairs.push('Path=/');
  pairs.push('Expires=' + (new Date(Date.now() + constants.EUM_COOKIE_EXPIRATION_DURATION)).toUTCString());
  if (self.isHttps) pairs.push('Secure');

  var rumCookie = pairs.join('; ');

  self.logger.debug("[Eum-cookie] setCookieHeader: Setting cookie: " + rumCookie);

  var cookies = rumCookie;

  if (self.lambdaResponse && self.lambdaResponse['multiValueHeaders'] && self.lambdaResponse['multiValueHeaders']['Set-Cookie']) {
    cookies = (self.lambdaResponse['multiValueHeaders']['Set-Cookie']).concat(rumCookie);
  } else if (self.lambdaResponse && self.lambdaResponse['headers'] && self.lambdaResponse['headers']['Set-Cookie']) {
    cookies = [self.lambdaResponse['headers']['Set-Cookie'], rumCookie];
    delete self.lambdaResponse['headers']['Set-Cookie'];
  }

  if (Array.isArray(cookies)) {
    self.logger.debug('[Eum-cookie]: Setting multiple value headers');
    if (!self.lambdaResponse['multiValueHeaders'])
      self.lambdaResponse['multiValueHeaders'] = {}
    self.lambdaResponse['multiValueHeaders']['Set-Cookie'] = cookies;
  }
  else {
    self.logger.debug('[Eum-cookie]: Setting single value header');
    if (!self.lambdaResponse['headers'])
      self.lambdaResponse['headers'] = {}

    self.lambdaResponse['headers']['Set-Cookie'] = cookies;
  }
}

EumCookie.prototype.setAjaxCall = function () {
  this.isAjax = true;
}

EumCookie.prototype.build = function () {
  var self = this;

  var adrumHeader = self.reqHeaders ? self.reqHeaders.adrum : undefined;
  if (self.isAjax == undefined || self.isAjax == null) {
    self.isAjax = !!(adrumHeader && adrumHeader.indexOf('isAjax:true') != -1);

    // If the referer header doesn't matches the Host header then
    // classify it as AJAX request
    if (self.reqHeaders && (self.reqHeaders.referer || self.reqHeaders['Referer'])) {
      var refererUrl = self.reqHeaders.referer || self.reqHeaders['Referer'],
        refererHost = url.parse(refererUrl).host;
      if (refererHost != this.reqHeaders['Host'])
        this.isAjax = true;
    }
  }


  var adrumHeader1 = self.reqHeaders ? self.reqHeaders.adrum_1 : undefined;
  self.isMobile = !!(adrumHeader1 && adrumHeader1.indexOf('isMobile:true') != -1);

  if (self.isMobile) {
    self.keyForm = 'long';
  }
  self.setFieldValues();
};

EumCookie.prototype.setFieldValues = function () {
  var self = this;

  // generate GUID
  self.guid = self.eum.generateGuid();

  self.addSubCookie(constants.CLIENT_REQUEST_GUID_KEY[self.keyForm], self.guid);

  if (self.eum.getGlobalAccountName()) {
    self.addSubCookie(constants.GLOBAL_ACCOUNT_NAME_KEY[self.keyForm], self.eum.getGlobalAccountName());
  }

  if (self.transaction.registrationId) {
    self.addSubCookie(constants.BT_ID_KEY[self.keyForm], self.transaction.registrationId);
  }

  if (self.transaction.ms && self.transaction.ts) {
    self.addSubCookie(constants.BT_DURATION_KEY[self.keyForm], (self.transaction.ms - self.transaction.ts));
  }

  self.setCookie();
};