/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
 */
'use strict';
const constants = require('../constants');

function TransactionRegistry(agent) {
  this.agent = agent;

  this.registeredBTIndex = undefined;
}
exports.TransactionRegistry = TransactionRegistry;


TransactionRegistry.prototype.init = function () {
  var self = this;

  self.registeredBTIndex = {};

  self.agent.on('configUpdated', function (agentConfigResponse) {
    self.updateRegisteredBTIndex(agentConfigResponse);
  });
};

TransactionRegistry.prototype.updateRegisteredBTIndex = function (agentConfigResponse) {
  var self = this;

  if (!agentConfigResponse || !agentConfigResponse.getRegisteredBTs) return;

  self.registeredBTIndex = {};

  var registeredBTs = agentConfigResponse.getRegisteredBTs();

  if (!Array.isArray(registeredBTs))
    registeredBTs = [registeredBTs];
  registeredBTs.forEach(function (registeredBT) {
    if (!registeredBT['bt_id'] || !registeredBT['entry_point_name'] || !registeredBT['entry_point_type']) return;
    self.registeredBTIndex[getBTKey(registeredBT['entry_point_name'], registeredBT['entry_point_type'])] = registeredBT;
  });
};

TransactionRegistry.prototype.getBTId = function (entryPointName, entryPointType) {
  var self = this;

  if (!entryPointName || !entryPointType)
    return null;

  var registeredBT = self.registeredBTIndex[getBTKey(entryPointName, entryPointType)];
  if (registeredBT) {
    return registeredBT['bt_id'];
  }

  return null;
};

// Overflow BT occurs when the number of registered BTs per application has hit the allowed limit=200BTs/App
// The overflow BT has a fixed BT name - _APPDYNAMICS_DEFAULT_TX_ . This function returns the overflow bt object which contains the bt_id, entry_point_name and entry_point_type
TransactionRegistry.prototype.getOverflowBT = function() {
  let self = this;
  let overFlowBT = null;

  Object.keys(self.registeredBTIndex).forEach(key => {
    if (key.startsWith(constants.OVERFLOW_TRANSACTION_NAME)) {
      overFlowBT = self.registeredBTIndex[key];
      return;
    }
  });

  return overFlowBT;
};

function getBTKey(entryPointName, entryPointType) {
  return entryPointName + '-' + entryPointType;
}