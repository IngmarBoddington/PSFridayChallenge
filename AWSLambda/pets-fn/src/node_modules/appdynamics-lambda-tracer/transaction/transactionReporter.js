'use strict';

var uuid = require('uuid');
var constants = require('../constants');
var Logger = require('../helpers/logger').Logger;
var CorrelationHeader = require('../correlation/correlationHeader').CorrelationHeader;
var BTRegistrationEvent = require('../events/registrationBTEvent').BTRegistrationEvent;

function TransactionReporter(agent, txnRegistry, agentConfigResponse, eventService) {
  this.agent = agent;
  this.transactionRegistry = txnRegistry;
  this.agentConfigResponse = agentConfigResponse;
  this.eventService = eventService;
  this.logger = Logger.getInstance();
}
exports.TransactionReporter = TransactionReporter;
TransactionReporter.prototype.init = function () {
  var self = this;

  self.agent.on('transactionStarted', function (eventData) {
    var transaction = eventData.txn;
    var lambdaEvent = eventData.lambdaEvent;
    var lambdaContext = eventData.lambdaContext;
    var correlationHeaderString = TransactionReporter.getCorrelationHeader(lambdaEvent, lambdaContext);
    if (!correlationHeaderString) {
      self.logger.debug('Transaction didn\'t receive a correlation header');
      self.makeOriginatingTransaction(transaction);
    } else {
      self.logger.debug('Transaction received correlation header', correlationHeaderString);
      var corrHeader = TransactionReporter.processCorrelationHeader(correlationHeaderString,
        self.agentConfigResponse.getApplicationId(),
        self.agentConfigResponse.getAccountGuid(),
        self.agentConfigResponse.getTierId(),
        self.agentConfigResponse.getControllerGuid());
      transaction.corrHeader = corrHeader;
      self.logger.debug('Created correlation header:', corrHeader);
      if (!corrHeader.valid && corrHeader.disabledTransaction()) {
        self.logger.debug('Not correlating transaction, disabled from the origination tier');
        // Ignore the transaction
        transaction.ignore = true;
        transaction.stopped = true;
      } else if (!corrHeader.valid) {
        self.logger.debug('Invalid correlation header, creating originating transaction');
        self.makeOriginatingTransaction(transaction);
      } else {
        if (corrHeader.isCrossApp()) {
          self.logger.debug('Received cross app correlation header. Creating originating transaction');
          self.makeOriginatingTransaction(transaction);
          transaction.callerChain = corrHeader.getCallerChain();
        } else {
          //Create a continuing transaction
          self.logger.debug('Received in app correation header. Creating contiuing transaction');
          self.makeContinuingTransaction(transaction, corrHeader);
        }
      }
    }
  });
};

TransactionReporter.prototype.makeOriginatingTransaction = function (transaction) {
  var self = this;
  var btId = self.transactionRegistry.getBTId(transaction.name, "NODEJS_WEB");

  // Always set the guid, since this is used to count the number of events by kinesis analytics
  transaction.guid = uuid.v4();
  transaction.ts = Date.now();

  if (!btId) {
    // If btId is not present for the default transaction name and entry type, then we check the transactionRegistry for the Overflow BT name.
    // Overflow BT occurs when the number of registered BTs per application has hit the allowed limit=200BTs/App
    let overflowBT = self.transactionRegistry.getOverflowBT();
    if (overflowBT) {
      btId = overflowBT['bt_id'];
      // storing entry point name and type shouldn't matter but update the transaction object in order to maintain consistency
      transaction.name = overflowBT['entry_point_name'];
      transaction.entryType = overflowBT['entry_point_type'];
    } else {
      // If a BT ID could not be found for the default transaction or overflow transaction, then create a new registration event. Do not flush the event immediately because
      // the lack of BT ID also signals that we will be sending a cold start BT event downstream soon.
      //Send Registration BT Event
      self.logger.debug('Sending Registration BT event for bt = ' + transaction.name);
      var btRegistrationEvent = new BTRegistrationEvent(transaction.name, "NODEJS_WEB", constants.DEFAULT_AGENT_VERSION);
      self.eventService.addEvent(btRegistrationEvent);
      return;
    }
  }

  transaction.registrationId = btId;
  transaction.accountGUID = self.agentConfigResponse.getAccountGuid();
  transaction.applicationID = self.agentConfigResponse.getApplicationId();
  transaction.tierID = self.agentConfigResponse.getTierId();
  transaction.skewAdjustedStartWallTime = self.agentConfigResponse.isLagging() ? (Date.now() + self.agentConfigResponse.getTimeSkew()) : (Date.now() - self.agentConfigResponse.getTimeSkew());
  return;
}

TransactionReporter.prototype.makeContinuingTransaction = function (transaction, corrHeader) {
  var self = this;
  if (!corrHeader.makeContinuingTransaction(transaction)) {
    self.makeOriginatingTransaction(transaction);
    return;
  };
  transaction.accountGUID = self.agentConfigResponse.getAccountGuid();
  transaction.applicationID = self.agentConfigResponse.getApplicationId();
  transaction.tierID = self.agentConfigResponse.getTierId();
  transaction.ts = Date.now();
  return;
}

/**
   * Fetch the correlation header from the following places in order:
   *
   * 1.) context.clientContext.env => context.clientContext.env[constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY] https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html
   * 2.) event => event[constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY] https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html
   * 3.) event.headers => event.headers[constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY] https://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html
  */
TransactionReporter.getCorrelationHeader = function (event, context) {
  if (context && context.clientContext && context.clientContext.env && context.clientContext.env[constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY]) {
    return context.clientContext.env[constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY];
  }
  if (event && event[constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY])
    return event[constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY];
  if (event && event[constants.HTTP_HEADERS] && event[constants.HTTP_HEADERS][constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY])
    return event[constants.HTTP_HEADERS][constants.APPDYNAMICS_TRANSACTION_CORRELATION_HEADER_KEY];
  return;
}

TransactionReporter.processCorrelationHeader = function (correlationHeader, appId, accountGUID, tierId, controllerGuid) {
  var corrHeader = new CorrelationHeader(appId, accountGUID, tierId, controllerGuid);
  corrHeader.valid = corrHeader.validateHeaderString(correlationHeader);
  return corrHeader;
}