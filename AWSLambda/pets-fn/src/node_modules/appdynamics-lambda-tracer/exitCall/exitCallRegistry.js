'use strict';

var hash = require('object-hash');

function ExitCallRegistry(agent) {
  this.agent = agent;

  this.registeredBackendInfoIndex = undefined;
}
exports.ExitCallRegistry = ExitCallRegistry;


ExitCallRegistry.prototype.init = function () {
  var self = this;

  self.registeredBackendInfoIndex = {};

  self.agent.on('configUpdated', function (agentConfigResponse) {
    self.updateRegisteredExitCallIndex(agentConfigResponse);
  });
};

ExitCallRegistry.prototype.updateRegisteredExitCallIndex = function (agentConfigResponse) {
  var self = this;
  if (!agentConfigResponse) return;

  self.registeredBackendInfoIndex = {};

  var registeredExitCalls = agentConfigResponse.getRegisteredBackendInfo();
  if (!registeredExitCalls || !Array.isArray(registeredExitCalls))
    return;

  registeredExitCalls.forEach(function (registeredBackendInfo) {
    if (!registeredBackendInfo['backend_id'] || !registeredBackendInfo['exit_point_type'] || !registeredBackendInfo['exit_point_sub_type'] || !registeredBackendInfo['identifying_properties']) return;
    registeredBackendInfo['identifying_properties'] = unparseIdentifyingProperties(registeredBackendInfo['identifying_properties']);
    self.registeredBackendInfoIndex[getBackendKey(registeredBackendInfo['exit_point_type'], registeredBackendInfo['exit_point_sub_type'], registeredBackendInfo['identifying_properties'])] = registeredBackendInfo;
  });
};

ExitCallRegistry.prototype.getBackendId = function (exitType, exitSubType, identifyingProperties) {
  var generatedBackendKey = getBackendKey(exitType, exitSubType, identifyingProperties);
  var registeredBackend = this.registeredBackendInfoIndex[generatedBackendKey];
  if (registeredBackend) {
    return registeredBackend['backend_id'];
  }
  return;
};

ExitCallRegistry.prototype.getBackendInfo = function (exitType, exitSubType, identifyingProperties) {
  var generatedBackendKey = getBackendKey(exitType, exitSubType, identifyingProperties);
  var registeredBackend = this.registeredBackendInfoIndex[generatedBackendKey];
  if (registeredBackend) {
    return registeredBackend;
  }
  return;
}

function getBackendKey(exitType, exitSubType, identifyingProperties) {
  const backendIdentifyingObj = {
    exitType: exitType,
    exitSubType: exitSubType,
    identifyingProperties: identifyingProperties
  };
  return hash(backendIdentifyingObj);
}

function unparseIdentifyingProperties(identifyingPropertiesArr) {
  var identifyingPropertiesObj = {};
  identifyingPropertiesArr.forEach(function (ip) {
    identifyingPropertiesObj[ip['property']] = ip['value'];
  });
  return identifyingPropertiesObj;
}