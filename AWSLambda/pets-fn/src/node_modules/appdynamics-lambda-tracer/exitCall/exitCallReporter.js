'use strict';

var ExitComponent = require('./resolution/exitComponent').ExitComponent;
var UnresolvedExitComponent = require('./resolution/unresolvedComponent').UnresolvedExitComponent;
var ExitFederatedAppComponent = require('./resolution/exitFederatedAppComponent').ExitFederatedAppComponent;
var ExitForeignAppComponent = require('./resolution/exitForeignAppComponent').ExitForeignAppComponent;
var Logger = require('../helpers/logger').Logger;

function ExitCallReporter(agent, exitCallRegistry, agentConfigResponse) {
  this.agent = agent;
  this.exitCallRegistry = exitCallRegistry;
  this.agentConfigResponse = agentConfigResponse;
  this.logger = Logger.getInstance();
}
exports.ExitCallReporter = ExitCallReporter;
ExitCallReporter.prototype.init = function () {
  var self = this;
  var registry = self.exitCallRegistry;

  self.agent.on('exitCallStarted', function (exitCall) {
    exitCall.accountGUID = self.agentConfigResponse.getAccountGuid();
    exitCall.applicationID = self.agentConfigResponse.getApplicationId();
    exitCall.tierID = self.agentConfigResponse.getTierId();
    exitCall.startTimeInMs = Date.now();

    if (!exitCall.backendId) {
      exitCall.backendId = registry.getBackendId(exitCall.exitType, exitCall.exitSubType, exitCall.identifyingProperties);
    }
    var registeredBackendInfo = registry.getBackendInfo(exitCall.exitType, exitCall.exitSubType, exitCall.identifyingProperties);
    switch (registeredBackendInfo['resolved_entity_type']) {
      case 'COMPONENT': {
        exitCall.exitComponent = new ExitComponent(exitCall.backendId, registeredBackendInfo['resolved_entity_id']);
        break;
      }
      case 'FOREIGN_APP': {
        exitCall.exitComponent = new ExitForeignAppComponent(exitCall.backendId, registeredBackendInfo['resolved_entity_id']);
        break;
      }
      case 'FEDERATED_APP': {
        exitCall.exitComponent = new ExitFederatedAppComponent(exitCall.backendId, registeredBackendInfo['federated_app_id'], registeredBackendInfo['federated_account_guid']);
        break;
      }
      case 'UNRESOLVED': {
        exitCall.exitComponent = new UnresolvedExitComponent(exitCall.backendId);
        break;
      }
      default: {
        self.logger.error('Unknown backend resolution type', registeredBackendInfo['resolved_entity_type']);
      }
    }
  });
};