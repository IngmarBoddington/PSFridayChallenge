// ToDo: Implement a more productized logger than just console.
// Note: This can be made a singleton so that all the files access the same logger.

module.exports.Logger = (function () {

  var INSTANCE;

  function Logger(name) {
    if (!(this instanceof Logger)) {
      return new Logger(name);
    }
  }
  Logger.prototype.info = function () {
    var msgString = processMsg(arguments);
    console.log('[Info] [Appdynamics]', msgString);
  }

  Logger.prototype.error = function () {
    var msgString = processMsg(arguments);
    console.log('[Error] [Appdynamics]', msgString);
  }

  Logger.prototype.warn = function () {
    var msgString = processMsg(arguments);
    console.log('[Warn] [Appdynamics]', msgString);
  }

  Logger.prototype.debug = function () {
    if (!this.debugMode)
      return;
    var msgString = processMsg(arguments);
    console.log('[Debug] [Appdynamics]', msgString);
  }

  Logger.prototype.setDebugMode = function () {
    this.debugMode = true;
  }
  function processMsg(msgArg) {
    var msgString = msgArg.length ? msgArg[0] : '';
    if (msgArg.length > 1)
      msgString = computeMsgFromObject(msgArg);
    return msgString;
  }

  function computeMsgFromObject(msgArray) {
    var msgString = '';
    for (var i = 0; i < msgArray.length; i++) {
      if (typeof (msgArray[i]) === 'object')
        msgString += ' ' + JSON.stringify(msgArray[i]);
      else
        msgString += ' ' + msgArray[i];
    }
    return msgString;
  }

  return {
    getInstance: function () {
      if (!INSTANCE) {
        return INSTANCE = Logger.apply(null, arguments);
      }
      return INSTANCE;
    }
  };

}());